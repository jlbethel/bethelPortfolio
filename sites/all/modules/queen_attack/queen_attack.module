<?php
function queen_attack_menu() {
  $items = array();
  $items['queen_attack'] = array(
    'title' => 'Queen Attack',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('queen_attack_form'),
  );
  $items['queen_result'] = array(
    'title' => 'Success',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'queen_attack_result',
  );
  return $items;
}

function queen_attack_form() {
  $form = array();
  $form['queen_x_position'] = array(
    '#title' => 'Queen X Position',
    '#type' => 'textfield',
    '#description' => t('Enter the x position of your queen'),
    '#element_validate' => array('element_validate_board', 'element_validate_integer'),
    '#required' => TRUE,
  );

  $form['queen_y_position'] = array(
    '#title' => 'Queen Y Position',
    '#type' => 'textfield',
    '#description' => t('Enter the y position of your queen'),
    '#element_validate' => array('element_validate_board', 'element_validate_integer'),
    '#required' => TRUE,
  );

  $form['opponent_x_position'] = array(
    '#title' => 'Opponent X Position',
    '#type' => 'textfield',
    '#description' => t('Enter the X position of the piece you want to attack'),
    '#element_validate' => array('element_validate_board', 'element_validate_integer'),
    '#required' => TRUE,
  );

  $form['opponent_y_position'] = array(
    '#title' => 'Queen Y Position',
    '#type' => 'textfield',
    '#description' => t('Enter the Y position of your queen'),
    '#element_validate' => array('element_validate_board', 'element_validate_integer'),
    '#required' => TRUE,
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Check Move',
  );
  return $form;
}

function queen_attack_form_submit($form, &$form_state) {
  $queen_x = $form_state['values']['queen_x_position'];
  $queen_y = $form_state['values']['queen_y_position'];
  $opponent_x = $form_state['values']['opponent_x_position'];
  $opponent_y = $form_state['values']['opponent_y_position'];
  $attack_result = "";
  //account for actual positions on a board in a (x,y) numeric relationship,
  //check to see if they are in the same row by matching either x or y
  //check to see if they are diagnally compatable by testing for the differences between
  //x & x and y & y being equal - all legal diagnal movements for queen meet this standard.
  //test absolute values since negative intergers are possible for matching combos.
  if ($queen_x >= 9 || $queen_y >= 9 || $queen_x <= 0 || $queen_y <= 0||
  $opponent_x >= 9 || $opponent_y >= 9 || $opponent_x <= 0 || $opponent_y <= 0) {
    $attack_result = "There are invalid positions on the board.";
  } elseif($queen_x == $opponent_x && $opponent_y == $queen_y) {
    $attack_result = "The queen and advisary can not occupy the same space.";
  } elseif($queen_x === $opponent_x ||
           $queen_y === $opponent_y ||
           abs($queen_x - $opponent_x) === abs($queen_y - $opponent_y)) {
      $attack_result = "The queen can and will strike!!";
    } else {
        $attack_result = "The queen can not attack";
      }

  $_SESSION ['attack_output'] = $attack_result;
  $form_state['redirect'] = 'queen_result';
}

function queen_attack_result() {
  return $_SESSION['attack_output'];
}

function element_validate_board($element) {
  if($element['#value'] > 8 || $element['#value'] < 1) {
    form_error($element, t('Number must between 1 and 8.'));
  }
}

function queen_attack_form_validate($form, &$form_state) {
  if ($form_state['values']['queen_x_position'] === $form_state['values']['opponent_x_position'] && $form_state['values']['queen_y_position'] === $form_state['values']['opponent_y_position']) {
    form_set_error( "queen_x_position", "The queen and opponent can't occupy the same space");
  }
}
